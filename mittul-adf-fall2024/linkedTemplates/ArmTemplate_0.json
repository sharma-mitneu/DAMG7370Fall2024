{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mittul-adf-fall2024"
		},
		"ls_snowflake_demo_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_snowflake_demo'"
		},
		"ls_stgblobmittul2024_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_stgblobmittul2024'"
		},
		"ls_mittulstgfall2024_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://mittulstgfall2024.dfs.core.windows.net/"
		},
		"ls_snowflake_demo_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "DEV_EDW1"
		},
		"ls_stgblobdamg7370_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'ls_stgblobdamg7370'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_mittulstgfall2024')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_mittulstgfall2024_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_snowflake_demo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SnowflakeV2",
				"typeProperties": {
					"authenticationType": "Basic",
					"accountIdentifier": "zn75145.canada-central.azure",
					"user": "mittul_dev",
					"database": "[parameters('ls_snowflake_demo_properties_typeProperties_database')]",
					"warehouse": "COMPUTE_WH_SAMPLE1",
					"role": "DEV_ROLE",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_snowflake_demo_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_stgblobdamg7370')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('ls_stgblobdamg7370_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_stgblobmittul2024')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_stgblobmittul2024_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/onPrem-shir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_locationDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LOCATION_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "ZIP",
						"type": "VARCHAR"
					},
					{
						"name": "CITY",
						"type": "VARCHAR"
					},
					{
						"name": "STATE",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "DATE"
					},
					{
						"name": "DI_CREATED_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "EDW",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_parquet_Staging')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mittulstgfall2024",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_pet_licenses.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mittulstgfall2024')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_read_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mittulstgfall2024",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Seattle_pet_licenses.parquet",
						"fileSystem": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "License_Issue_Date",
						"type": "UTF8"
					},
					{
						"name": "License_Number",
						"type": "UTF8"
					},
					{
						"name": "Animal_Name",
						"type": "UTF8"
					},
					{
						"name": "Species",
						"type": "UTF8"
					},
					{
						"name": "Primary_Breed",
						"type": "UTF8"
					},
					{
						"name": "Secondary_Breed",
						"type": "UTF8"
					},
					{
						"name": "ZIP_Code",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mittulstgfall2024')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_snowflake_stage_spl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "LICENSE_ISSUE_DATE",
						"type": "VARCHAR"
					},
					{
						"name": "LICENSE_NUMBER",
						"type": "VARCHAR"
					},
					{
						"name": "ANIMAL_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SPECIES",
						"type": "VARCHAR"
					},
					{
						"name": "PRIMARY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDRY_BREED",
						"type": "VARCHAR"
					},
					{
						"name": "ZIP_CODE",
						"type": "NUMBER",
						"precision": 38,
						"scale": 0
					},
					{
						"name": "DI_CREATEDDATE",
						"type": "TIMESTAMP_NTZ"
					},
					{
						"name": "DI_JOBPID",
						"type": "VARCHAR"
					}
				],
				"typeProperties": {
					"schema": "STAGE",
					"table": "STG_SEATTLEPETLICENSES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_BreedDIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_snowflake_demo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SnowflakeV2Table",
				"schema": [
					{
						"name": "BREED_SK",
						"type": "NUMBER",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "PRIMARY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SECONDRY_BREED_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "SPECIES_NAME",
						"type": "VARCHAR"
					},
					{
						"name": "DI_JOB_ID",
						"type": "VARCHAR"
					},
					{
						"name": "DI_CREATED_DT",
						"type": "DATE"
					}
				],
				"typeProperties": {
					"schema": "EDW",
					"table": "BREED_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_snowflake_demo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_textfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mittulstgfall2024",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "Seattle_Pet_Licenses_20241007.tsv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": "\t",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mittulstgfall2024')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/read_data_geo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mittulstgfall2024",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "geo-data.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state_fips",
						"type": "String"
					},
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "state_abbr",
						"type": "String"
					},
					{
						"name": "zipcode",
						"type": "String"
					},
					{
						"name": "county",
						"type": "String"
					},
					{
						"name": "city",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mittulstgfall2024')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Location_Dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "read_data_geo",
								"type": "DatasetReference"
							},
							"name": "sourcesnowflakestage"
						},
						{
							"dataset": {
								"referenceName": "ds_locationDim",
								"type": "DatasetReference"
							},
							"name": "sourceLocationDIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_locationDim",
								"type": "DatasetReference"
							},
							"name": "sinkLocationDIM"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"1\")",
						"}",
						"source(output(",
						"          state_fips as string,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcesnowflakestage",
						"source(output(",
						"          MAXLOCATIONSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'Select NVL(MAX(LOCATION_SK),0) as MaxLocationSK FROM EDW.LOCATION_DIM',",
						"     format: 'query') ~> sourceLocationDIM",
						"sourcesnowflakestage, sourceLocationDIM join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(LOCATION_SK = MAXLOCATIONSK + RowNum,",
						"          DI_JOB_ID = $DI_JOB_ID,",
						"          DI_CREATED_DT = toString(currentDate(),'yyyy-MM-dd')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          ZIP as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK,",
						"          ZIP = zipcode,",
						"          CITY = city,",
						"          STATE = state,",
						"          DI_JOB_ID,",
						"          DI_CREATED_DT",
						"     )) ~> sinkLocationDIM"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/read_data_geo')]",
				"[concat(variables('factoryId'), '/datasets/ds_locationDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_load_breed_dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_snowflake_stage_spl",
								"type": "DatasetReference"
							},
							"name": "sourcesnowflakestage"
						},
						{
							"dataset": {
								"referenceName": "ds_source_BreedDIM",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_source_BreedDIM",
								"type": "DatasetReference"
							},
							"name": "sinkBreedDim"
						}
					],
					"transformations": [
						{
							"name": "SourceDataWithSK",
							"description": "Custom cross join on 'sourceStg' and 'sourceBreedDIM'"
						},
						{
							"name": "aggregateBreedKeys"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"mittul_adf\")",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDRY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_CREATEDDATE as string,",
						"          DI_JOBPID as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourcesnowflakestage",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'Select NVL(MAX(BREED_SK),0) as MaxBreedSK FROM EDW.BREED_DIM',",
						"     format: 'query') ~> sourceBreedDim",
						"sourcesnowflakestage, sourceBreedDim join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourceDataWithSK",
						"SourceDataWithSK aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDRY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
						"aggregateBreedKeys keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
						"          DI_CREATED_DT = toString(currentDate(), 'yyyy-MM-dd'),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_SK as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDRY_BREED_NAME as string,",
						"          SPECIES_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_CREATED_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
						"          SECONDRY_BREED_NAME = SECONDRY_BREED,",
						"          SPECIES_NAME = SPECIES,",
						"          DI_JOB_ID,",
						"          DI_CREATED_DT",
						"     )) ~> sinkBreedDim"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_snowflake_stage_spl')]",
				"[concat(variables('factoryId'), '/datasets/ds_source_BreedDIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_tsv_2_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_2_Silver_As_Parquet",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License Issue Date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "License_Issue_Date",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "License Number",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "License_Number",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Animal's Name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Animal_Name",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Species",
											"type": "String",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Primary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Primary_Breed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "Secondary Breed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Secondary_Breed",
											"physicalType": "UTF8"
										}
									},
									{
										"source": {
											"name": "ZIP Code",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ZIP_Code",
											"physicalType": "UTF8"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_textfile",
								"type": "DatasetReference",
								"parameters": {
									"Directory": "na",
									"FileName": "Seattle_Pet_Licenses_20241007.tsv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_parquet_Staging",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Parquet2StageTable",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy_2_Silver_As_Parquet",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"additionalColumns": [
									{
										"name": "DI_JOB_ID",
										"value": {
											"value": "@pipeline().parameters.JOBID",
											"type": "Expression"
										}
									},
									{
										"name": "DI_CREATED_DT",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "ls_stgblobmittul2024",
									"type": "LinkedServiceReference"
								},
								"path": "snowflakestage"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "License_Issue_Date",
											"type": "String"
										},
										"sink": {
											"name": "LICENSE_ISSUE_DATE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "License_Number",
											"type": "String"
										},
										"sink": {
											"name": "LICENSE_NUMBER",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Animal_Name",
											"type": "String"
										},
										"sink": {
											"name": "ANIMAL_NAME",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Species",
											"type": "String"
										},
										"sink": {
											"name": "SPECIES",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Primary_Breed",
											"type": "String"
										},
										"sink": {
											"name": "PRIMARY_BREED",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Secondary_Breed",
											"type": "String"
										},
										"sink": {
											"name": "SECONDRY_BREED",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ZIP_Code",
											"type": "String"
										},
										"sink": {
											"name": "ZIP_CODE",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DI_CREATED_DT",
											"type": "String"
										},
										"sink": {
											"name": "DI_CREATEDDATE",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DI_JOB_ID",
											"type": "String"
										},
										"sink": {
											"name": "DI_JOBPID",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_read_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_snowflake_stage_spl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "df_BreedDim",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_load_breed_dim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourcesnowflakestage": {},
									"sourceBreedDim": {},
									"sinkBreedDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_Location_Dim",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Location_Dim",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourcesnowflakestage": {},
									"sourceLocationDIM": {},
									"sinkLocationDIM": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JOBID": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_textfile')]",
				"[concat(variables('factoryId'), '/datasets/ds_parquet_Staging')]",
				"[concat(variables('factoryId'), '/datasets/ds_read_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_snowflake_stage_spl')]",
				"[concat(variables('factoryId'), '/dataflows/df_load_breed_dim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Location_Dim')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_stgblobmittul2024')]"
			]
		}
	]
}