{
	"name": "df_load_breed_dim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_snowflake_stage_spl",
						"type": "DatasetReference"
					},
					"name": "sourcesnowflakestage"
				},
				{
					"dataset": {
						"referenceName": "ds_source_BreedDIM",
						"type": "DatasetReference"
					},
					"name": "sourceBreedDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_source_BreedDIM",
						"type": "DatasetReference"
					},
					"name": "sinkBreedDim"
				}
			],
			"transformations": [
				{
					"name": "SourceDataWithSK",
					"description": "Custom cross join on 'sourceStg' and 'sourceBreedDIM'"
				},
				{
					"name": "aggregateBreedKeys"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     DI_JOB_ID as string (\"mittul_adf\")",
				"}",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDRY_BREED as string,",
				"          ZIP_CODE as string,",
				"          DI_CREATEDDATE as string,",
				"          DI_JOBPID as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     format: 'table') ~> sourcesnowflakestage",
				"source(output(",
				"          MAXBREEDSK as decimal(10,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'Select NVL(MAX(BREED_SK),0) as MaxBreedSK FROM EDW.BREED_DIM',",
				"     format: 'query') ~> sourceBreedDim",
				"sourcesnowflakestage, sourceBreedDim join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> SourceDataWithSK",
				"SourceDataWithSK aggregate(groupBy(SPECIES,",
				"          PRIMARY_BREED,",
				"          SECONDRY_BREED,",
				"          MAXBREEDSK),",
				"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
				"aggregateBreedKeys keyGenerate(output(RowNum as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
				"          DI_CREATED_DT = toString(currentDate(), 'yyyy-MM-dd'),",
				"          DI_JOB_ID = $DI_JOB_ID) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          BREED_SK as string,",
				"          PRIMARY_BREED_NAME as string,",
				"          SECONDRY_BREED_NAME as string,",
				"          SPECIES_NAME as string,",
				"          DI_JOB_ID as string,",
				"          DI_CREATED_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          BREED_SK,",
				"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
				"          SECONDRY_BREED_NAME = SECONDRY_BREED,",
				"          SPECIES_NAME = SPECIES,",
				"          DI_JOB_ID,",
				"          DI_CREATED_DT",
				"     )) ~> sinkBreedDim"
			]
		}
	}
}